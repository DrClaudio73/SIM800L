#include <stdio.h>
// FreeRTOS includes
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"

// UART driver
#include "driver/uart.h"

// Error library
#include "esp_err.h"

#include "string.h"

// read a line from the UART controller
char* read_line(uart_port_t uart_controller) {
	static char line[2048];
	char *ptr = line;
	printf("\nread_line on UART: %d\n", (int) uart_controller);
    while(1) {
		int num_read = uart_read_bytes(uart_controller, (unsigned char *)ptr, 1, portMAX_DELAY);
		if(num_read == 1) {
			// new line found, terminate the string and return 
            //printf("received char: %c", *ptr);
			if(*ptr == '\n') {
				ptr++;
				*ptr = '\0';
				return line;
			}
			// else move to the next char
			ptr++;
		}
	}
}

char* parse_line(char* line,int k){
    static char subline[2048];
    if (strncmp(line,"AT\n",3)==0){
        sprintf(subline,"%s","OK\n");
    } else if(strncmp(line,"AT+CGI\n",7)==0){
        sprintf(subline,"%s","OK+CGI1030\n");
    } else{
        sprintf(subline,"%s%d",line,k);
    }
    return subline;
}

// Main application
void app_main() {

	printf("UART echo\r\n\r\n");
	
	// configure the UART1 controller
	uart_config_t uart_config1 = {
        .baud_rate = 9600,
        .data_bits = UART_DATA_8_BITS,
        .parity    = UART_PARITY_DISABLE,
        .stop_bits = UART_STOP_BITS_1,
        .flow_ctrl = UART_HW_FLOWCTRL_DISABLE
    };
    uart_config_t uart_config2 = {
        .baud_rate = 9600,
        .data_bits = UART_DATA_8_BITS,
        .parity    = UART_PARITY_DISABLE,
        .stop_bits = UART_STOP_BITS_1,
        .flow_ctrl = UART_HW_FLOWCTRL_DISABLE
    };
    uart_param_config(UART_NUM_1, &uart_config1);
    uart_set_pin(UART_NUM_1, 22, 23, UART_PIN_NO_CHANGE, UART_PIN_NO_CHANGE); //TX , RX
    uart_driver_install(UART_NUM_1, 1024, 0, 0, NULL, 0);
    //uint8_t *data1 = (uint8_t *) malloc(1024);

	/* configure the UART2 controller */
    uart_param_config(UART_NUM_2, &uart_config2);
    uart_set_pin(UART_NUM_2, 18, 19, UART_PIN_NO_CHANGE, UART_PIN_NO_CHANGE);
    uart_driver_install(UART_NUM_2, 1024, 0, 0, NULL, 0);
    //uint8_t *data2 = (uint8_t *) malloc(1024);
	
	//uart_write_bytes(UART_NUM_1, "Ready! Ciao a tutti1!!!!!!!!!!\r\n", sizeof("Ready! Ciao a tutti1!!!!!!!!!!\r\n"));
    uart_write_bytes(UART_NUM_2, "AT\n", 3);

    //char strout[5];
 
   printf("Entering while loop!!!!!\r\n");
   int k=0;
    while (1) {
        k++;
        //get data from stdin
        //int len = fgets(data,1024,stdin);

		// Read data from the UART1
        char *line1 = read_line(UART_NUM_1);
		// Write data back to the UART
		printf("I1: %s", line1);
        char* subline1=parse_line(line1,k);
     	printf("O1: %s", subline1);
        uart_write_bytes(UART_NUM_1,subline1, strlen(subline1));

        vTaskDelay(1000 / portTICK_RATE_MS);

		// Read data from the UART2
        char *line2 = read_line(UART_NUM_2);
		// Write data back to the UART
		printf("I2: %s", line2);
        char* subline2=parse_line(line2,k);
     	printf("O2: %s", subline2);
        uart_write_bytes(UART_NUM_2,subline2, strlen(subline2));
        vTaskDelay(1000 / portTICK_RATE_MS);
        }
	fflush(stdout);
}